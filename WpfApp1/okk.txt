User Story: Common Operation Configuration Control

Title: Create a Reusable Configuration Control for All Filter Operations

As a Programmer,
I want to create a common WPF user control that can be included within the configuration view for any selected filter operation,
so that I can provide a consistent way for users to set a standard Override and Value parameter across different operations, reducing code duplication and standardizing the UI.
Acceptance Criteria:

    Given the common configuration control is displayed,
    When it is first rendered,
    Then it must contain a toggle button (e.g., ToggleButton or CheckBox) labeled "Override" and a numeric input field (e.g., TextBox) for an integer value.

    Given the "Override" toggle button is in its "off" (unchecked) state,
    When the user views the control,
    Then the numeric input field must be disabled and visually indicate that it is not editable (e.g., grayed out).

    Given the "Override" toggle button is in its "off" (unchecked) state,
    When the user clicks it,
    Then the toggle button must switch to its "on" (checked) state, and the numeric input field must become enabled and editable.

    Given the numeric input field is enabled,
    When the user enters a non-numeric character,
    Then the input must be rejected, and only integer values (0-9) should be permitted.

    Given the control is part of a larger view,
    When the user interacts with the toggle and the numeric input,
    Then the control's state must be correctly data-bound to two properties: a boolean for the toggle (Override) and an Int32 for the numeric field (Value).

    Given the control is instantiated,
    When default values are provided via data binding,
    Then the control must accurately reflect these initial Override (boolean) and Value (Int32) states.

    Given the user toggles the "Override" button (either on or off),
    When the state changes,
    Then the application must immediately send an OverrideValueRequest to the configured endpoint, containing both the new Override boolean and the current Value integer.

    Given an OverrideValueRequest has been sent,
    When the application receives a successful OverrideValueResponse (where Success is true),
    Then the UI state remains as set by the user, confirming the change.

    Given an OverrideValueRequest has been sent,
    When the application receives a failed OverrideValueResponse (where Success is false),
    Then the "Override" toggle must revert to its previous state, and the Error message from the response must be displayed to the user.

Notes for Implementation (WPF Specific):

    The control should be implemented as a UserControl to ensure reusability.

    Use XAML data binding with a TwoWay mode to link the UI elements to the underlying view model properties (bool Override, Int32 Value).

    The view model responsible for this control must handle the asynchronous logic for sending the OverrideValueRequest and processing the OverrideValueResponse. Consider using async/await patterns.

    Implement input validation on the TextBox to restrict input to integers only. This can be done via a behavior, an attached property, or by handling the PreviewTextInput event.

    Use a Style with a DataTrigger bound to the IsChecked property of the toggle button to automatically enable/disable the numeric TextBox.

    The control's DataContext should be set to a view model or object that exposes the Override and Value properties.

    A user feedback mechanism should be considered to indicate that a background operation is in progress (e.g., a temporary loading spinner) and to display any error messages from the API response.








    *************************************
    User Story: Validate Override Value via Endpoint

Title: Validate Filter Operation Override via Backend Service

As a System,
I want to send an OverrideValueRequest to a backend endpoint whenever the user modifies the override setting,
so that the change can be validated and persisted, and any business rule violations are communicated back to the user.
Acceptance Criteria:

    Given the user changes the Override toggle state in the UI,
    When the corresponding view model property is updated,
    Then an OverrideValueRequest must be constructed and sent to the configured endpoint.

    Given the request is being constructed,
    When it is prepared for sending,
    Then it must contain the Override boolean and the current Value integer from the view model.

    Given the endpoint returns a successful OverrideValueResponse (where Success is true),
    When the response is processed,
    Then the system acknowledges the change as valid, and no UI state reversal is needed.

    Given the endpoint returns a failed OverrideValueResponse (where Success is false),
    When the response is processed,
    Then the system must trigger a mechanism to inform the UI to revert the Override toggle to its previous state.

    Given a failed OverrideValueResponse is received,
    When it is processed,
    Then the Error message string from the response must be captured and made available to be displayed to the user.

    Given a network error or service timeout occurs while sending the request,
    When the error is caught,
    Then the system should treat it as a failed validation, revert the UI state, and present a generic error message (e.g., "Failed to connect to the service.").

Notes for Implementation (WPF Specific):

    This logic should be encapsulated within the view model that serves as the DataContext for the common user control, not in the UserControl's code-behind.

    Use an async/await pattern to call the endpoint without blocking the UI thread.

    The view model should maintain the "previous state" of the Override toggle so it can be reverted upon failure. This is critical for fulfilling acceptance criterion #4.

    Implement a mechanism (e.g., a property on the view model, a messaging system) for communicating the Error string back to the view for display in a TextBlock or a popup notification.


    3*************************************************
    User Story: Display Override Value Warning

Title: Notify User of Suboptimal Override Value During Operation

As a User,
I want to be notified during an operation if the override value I've set is considered suboptimal by the server,
so that I can make an informed decision about whether to let the operation continue or to stop it and adjust my settings for better results.
Acceptance Criteria:

    Given the client application is handling OperationProgressEvents from the server,
    When an OperationProgressEvent is received that contains the field OverrideValueWarning set to true,
    Then a clear, non-blocking warning message must be displayed to the user.

    Given the warning is to be displayed,
    When the message is shown,
    Then its text must clearly state that the server has identified a better value (e.g., "Warning: The server suggests a more optimal value is available than the one provided.").

    Given an OperationProgressEvent is received,
    When the OverrideValueWarning field is false or not present in the event payload,
    Then no new warning message regarding the override value should be shown.

    Given the warning message is displayed,
    When the user sees it,
    Then the message must not interrupt or block the ongoing operation or prevent the user from interacting with other parts of the application.

Notes for Implementation (WPF Specific):

    The logic to inspect the OperationProgressEvent should be located in the application's event handling or service layer.

    The warning message should be displayed using a non-modal UI element like a toast notification, a temporary banner at the top/bottom of the relevant view, or a message in a status bar. Avoid using a MessageBox which would block the UI.

    Consider implementing a dedicated notification service that can be called from the event handling logic to display messages to the user. This decouples the event processing from the UI implementation.


    *********using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Input;

public class AutoSaveViewModel : INotifyPropertyChanged
{
    private string _userNotes;
    private string _saveStatus;
    private CancellationTokenSource _debounceCts;

    // This command will contain the save logic
    public ICommand SaveNotesCommand { get; }

    public string UserNotes
    {
        get => _userNotes;
        set
        {
            if (_userNotes != value)
            {
                _userNotes = value;
                OnPropertyChanged();
                
                // On every keystroke, execute the debounced save command
                SaveNotesCommand.Execute(value);
            }
        }
    }

    public string SaveStatus
    {
        get => _saveStatus;
        set
        {
            _saveStatus = value;
            OnPropertyChanged();
        }
    }

    public AutoSaveViewModel()
    {
        SaveNotesCommand = new AsyncRelayCommand(PerformDebouncedSaveAsync);
    }

    private async Task PerformDebouncedSaveAsync(object parameter)
    {
        var notesToSave = parameter as string;

        try
        {
            // Update status immediately to show something is happening
            SaveStatus = "Typing...";

            // Cancel any previous, still-pending save operation
            _debounceCts?.Cancel();
            _debounceCts = new CancellationTokenSource();

            // Wait for 1.5 seconds. If the user types again, this will be
            // cancelled and a new one will start.
            await Task.Delay(1500, _debounceCts.Token);

            // If we got here without being cancelled, proceed with the save.
            SaveStatus = "Saving...";
            Debug.WriteLine($"SAVING: '{notesToSave}'");
            
            // Your actual API call
            await WebApiService.SaveNotesAsync(notesToSave);
            
            SaveStatus = "Saved.";
        }
        catch (TaskCanceledException)
        {
            // This is expected. It means the user is still typing.
            // We don't need to do anything.
        }
        catch (Exception ex)
        {
            SaveStatus = "Error saving changes.";
            Debug.WriteLine($"Error: {ex.Message}");
        }
    }

    // --- INotifyPropertyChanged Implementation ---
    public event PropertyChangedEventHandler PropertyChanged;
    protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}